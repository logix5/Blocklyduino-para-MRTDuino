// This file was automatically generated.  Do not modify.

'use strict';

goog.provide('Blockly.Msg.en');

goog.require('Blockly.Msg');

Blockly.Msg.ADD_COMMENT = "Add Comment";
Blockly.Msg.AUTH = "Please authorize this app to enable your work to be saved and to allow it to be shared by you.";
Blockly.Msg.CHANGE_VALUE_TITLE = "Change value:";
Blockly.Msg.CHAT = "Chat with your collaborator by typing in this box!";
Blockly.Msg.CLEAN_UP = "Clean up Blocks";
Blockly.Msg.COLLAPSE_ALL = "Collapse Blocks";
Blockly.Msg.COLLAPSE_BLOCK = "Collapse Block";
Blockly.Msg.COLOUR_BLEND_COLOUR1 = "colour 1";
Blockly.Msg.COLOUR_BLEND_COLOUR2 = "colour 2";
Blockly.Msg.COLOUR_BLEND_HELPURL = "http://meyerweb.com/eric/tools/color-blend/";
Blockly.Msg.COLOUR_BLEND_RATIO = "ratio";
Blockly.Msg.COLOUR_BLEND_TITLE = "blend";
Blockly.Msg.COLOUR_BLEND_TOOLTIP = "Blends two colours together with a given ratio (0.0 - 1.0).";
Blockly.Msg.COLOUR_PICKER_HELPURL = "https://en.wikipedia.org/wiki/Color";
Blockly.Msg.COLOUR_PICKER_TOOLTIP = "Choose a colour from the palette.";
Blockly.Msg.COLOUR_RANDOM_HELPURL = "http://randomcolour.com";
Blockly.Msg.COLOUR_RANDOM_TITLE = "random colour";
Blockly.Msg.COLOUR_RANDOM_TOOLTIP = "Choose a colour at random.";
Blockly.Msg.COLOUR_RGB_BLUE = "blue";
Blockly.Msg.COLOUR_RGB_GREEN = "green";
Blockly.Msg.COLOUR_RGB_HELPURL = "http://www.december.com/html/spec/colorper.html";
Blockly.Msg.COLOUR_RGB_RED = "red";
Blockly.Msg.COLOUR_RGB_TITLE = "colour with";
Blockly.Msg.COLOUR_RGB_TOOLTIP = "Create a colour with the specified amount of red, green, and blue. All values must be between 0 and 100.";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_HELPURL = "https://github.com/google/blockly/wiki/Loops#loop-termination-blocks";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_OPERATOR_BREAK = "break out of loop";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_OPERATOR_CONTINUE = "continue with next iteration of loop";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_TOOLTIP_BREAK = "Break out of the containing loop.";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_TOOLTIP_CONTINUE = "Skip the rest of this loop, and continue with the next iteration.";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_WARNING = "Warning: This block may only be used within a loop.";
Blockly.Msg.CONTROLS_FOREACH_HELPURL = "https://github.com/google/blockly/wiki/Loops#for-each";
Blockly.Msg.CONTROLS_FOREACH_TITLE = "for each item %1 in list %2";
Blockly.Msg.CONTROLS_FOREACH_TOOLTIP = "For each item in a list, set the variable '%1' to the item, and then do some statements.";
Blockly.Msg.CONTROLS_FOR_HELPURL = "https://github.com/google/blockly/wiki/Loops#count-with";
Blockly.Msg.CONTROLS_FOR_TITLE = "count with %1 from %2 to %3 by %4";
Blockly.Msg.CONTROLS_FOR_TOOLTIP = "Have the variable '%1' take on the values from the start number to the end number, counting by the specified interval, and do the specified blocks.";
Blockly.Msg.CONTROLS_IF_ELSEIF_TOOLTIP = "Add a condition to the if block.";
Blockly.Msg.CONTROLS_IF_ELSE_TOOLTIP = "Add a final, catch-all condition to the if block.";
Blockly.Msg.CONTROLS_IF_HELPURL = "https://github.com/google/blockly/wiki/IfElse";
Blockly.Msg.CONTROLS_IF_IF_TOOLTIP = "Add, remove, or reorder sections to reconfigure this if block.";
Blockly.Msg.CONTROLS_IF_MSG_ELSE = "else";
Blockly.Msg.CONTROLS_IF_MSG_ELSEIF = "else if";
Blockly.Msg.CONTROLS_IF_MSG_IF = "if";
Blockly.Msg.CONTROLS_IF_TOOLTIP_1 = "If a value is true, then do some statements.";
Blockly.Msg.CONTROLS_IF_TOOLTIP_2 = "If a value is true, then do the first block of statements. Otherwise, do the second block of statements.";
Blockly.Msg.CONTROLS_IF_TOOLTIP_3 = "If the first value is true, then do the first block of statements. Otherwise, if the second value is true, do the second block of statements.";
Blockly.Msg.CONTROLS_IF_TOOLTIP_4 = "If the first value is true, then do the first block of statements. Otherwise, if the second value is true, do the second block of statements. If none of the values are true, do the last block of statements.";
Blockly.Msg.CONTROLS_REPEAT_HELPURL = "https://en.wikipedia.org/wiki/For_loop";
Blockly.Msg.CONTROLS_REPEAT_INPUT_DO = "do";
Blockly.Msg.CONTROLS_REPEAT_TITLE = "repeat %1 times";
Blockly.Msg.CONTROLS_REPEAT_TOOLTIP = "Do some statements several times.";
Blockly.Msg.CONTROLS_WHILEUNTIL_HELPURL = "https://github.com/google/blockly/wiki/Loops#repeat";
Blockly.Msg.CONTROLS_WHILEUNTIL_OPERATOR_UNTIL = "repeat until";
Blockly.Msg.CONTROLS_WHILEUNTIL_OPERATOR_WHILE = "repeat while";
Blockly.Msg.CONTROLS_WHILEUNTIL_TOOLTIP_UNTIL = "While a value is false, then do some statements.";
Blockly.Msg.CONTROLS_WHILEUNTIL_TOOLTIP_WHILE = "While a value is true, then do some statements.";
Blockly.Msg.DELETE_BLOCK = "Delete Block";
Blockly.Msg.DELETE_X_BLOCKS = "Delete %1 Blocks";
Blockly.Msg.DISABLE_BLOCK = "Disable Block";
Blockly.Msg.DUPLICATE_BLOCK = "Duplicate";
Blockly.Msg.ENABLE_BLOCK = "Enable Block";
Blockly.Msg.EXPAND_ALL = "Expand Blocks";
Blockly.Msg.EXPAND_BLOCK = "Expand Block";
Blockly.Msg.EXTERNAL_INPUTS = "External Inputs";
Blockly.Msg.HELP = "Help";
Blockly.Msg.INLINE_INPUTS = "Inline Inputs";
Blockly.Msg.LISTS_CREATE_EMPTY_HELPURL = "https://github.com/google/blockly/wiki/Lists#create-empty-list";
Blockly.Msg.LISTS_CREATE_EMPTY_TITLE = "create empty list";
Blockly.Msg.LISTS_CREATE_EMPTY_TOOLTIP = "Returns a list, of length 0, containing no data records";
Blockly.Msg.LISTS_CREATE_WITH_CONTAINER_TITLE_ADD = "list";
Blockly.Msg.LISTS_CREATE_WITH_CONTAINER_TOOLTIP = "Add, remove, or reorder sections to reconfigure this list block.";
Blockly.Msg.LISTS_CREATE_WITH_HELPURL = "https://github.com/google/blockly/wiki/Lists#create-list-with";
Blockly.Msg.LISTS_CREATE_WITH_INPUT_WITH = "create list with";
Blockly.Msg.LISTS_CREATE_WITH_ITEM_TOOLTIP = "Add an item to the list.";
Blockly.Msg.LISTS_CREATE_WITH_TOOLTIP = "Create a list with any number of items.";
Blockly.Msg.LISTS_GET_INDEX_FIRST = "first";
Blockly.Msg.LISTS_GET_INDEX_FROM_END = "# from end";
Blockly.Msg.LISTS_GET_INDEX_FROM_START = "#";
Blockly.Msg.LISTS_GET_INDEX_GET = "get";
Blockly.Msg.LISTS_GET_INDEX_GET_REMOVE = "get and remove";
Blockly.Msg.LISTS_GET_INDEX_LAST = "last";
Blockly.Msg.LISTS_GET_INDEX_RANDOM = "random";
Blockly.Msg.LISTS_GET_INDEX_REMOVE = "remove";
Blockly.Msg.LISTS_GET_INDEX_TAIL = "";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_FIRST = "Returns the first item in a list.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_FROM_END = "Returns the item at the specified position in a list. #1 is the last item.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_FROM_START = "Returns the item at the specified position in a list. #1 is the first item.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_LAST = "Returns the last item in a list.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_RANDOM = "Returns a random item in a list.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FIRST = "Removes and returns the first item in a list.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FROM_END = "Removes and returns the item at the specified position in a list. #1 is the last item.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FROM_START = "Removes and returns the item at the specified position in a list. #1 is the first item.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_LAST = "Removes and returns the last item in a list.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_RANDOM = "Removes and returns a random item in a list.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_FIRST = "Removes the first item in a list.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_FROM_END = "Removes the item at the specified position in a list. #1 is the last item.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_FROM_START = "Removes the item at the specified position in a list. #1 is the first item.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_LAST = "Removes the last item in a list.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_RANDOM = "Removes a random item in a list.";
Blockly.Msg.LISTS_GET_SUBLIST_END_FROM_END = "to # from end";
Blockly.Msg.LISTS_GET_SUBLIST_END_FROM_START = "to #";
Blockly.Msg.LISTS_GET_SUBLIST_END_LAST = "to last";
Blockly.Msg.LISTS_GET_SUBLIST_HELPURL = "https://github.com/google/blockly/wiki/Lists#getting-a-sublist";
Blockly.Msg.LISTS_GET_SUBLIST_START_FIRST = "get sub-list from first";
Blockly.Msg.LISTS_GET_SUBLIST_START_FROM_END = "get sub-list from # from end";
Blockly.Msg.LISTS_GET_SUBLIST_START_FROM_START = "get sub-list from #";
Blockly.Msg.LISTS_GET_SUBLIST_TAIL = "";
Blockly.Msg.LISTS_GET_SUBLIST_TOOLTIP = "Creates a copy of the specified portion of a list.";
Blockly.Msg.LISTS_INDEX_OF_FIRST = "find first occurrence of item";
Blockly.Msg.LISTS_INDEX_OF_HELPURL = "https://github.com/google/blockly/wiki/Lists#getting-items-from-a-list";
Blockly.Msg.LISTS_INDEX_OF_LAST = "find last occurrence of item";
Blockly.Msg.LISTS_INDEX_OF_TOOLTIP = "Returns the index of the first/last occurrence of the item in the list. Returns 0 if item is not found.";
Blockly.Msg.LISTS_INLIST = "in list";
Blockly.Msg.LISTS_ISEMPTY_HELPURL = "https://github.com/google/blockly/wiki/Lists#is-empty";
Blockly.Msg.LISTS_ISEMPTY_TITLE = "%1 is empty";
Blockly.Msg.LISTS_ISEMPTY_TOOLTIP = "Returns true if the list is empty.";
Blockly.Msg.LISTS_LENGTH_HELPURL = "https://github.com/google/blockly/wiki/Lists#length-of";
Blockly.Msg.LISTS_LENGTH_TITLE = "length of %1";
Blockly.Msg.LISTS_LENGTH_TOOLTIP = "Returns the length of a list.";
Blockly.Msg.LISTS_REPEAT_HELPURL = "https://github.com/google/blockly/wiki/Lists#create-list-with";
Blockly.Msg.LISTS_REPEAT_TITLE = "create list with item %1 repeated %2 times";
Blockly.Msg.LISTS_REPEAT_TOOLTIP = "Creates a list consisting of the given value repeated the specified number of times.";
Blockly.Msg.LISTS_SET_INDEX_HELPURL = "https://github.com/google/blockly/wiki/Lists#in-list--set";
Blockly.Msg.LISTS_SET_INDEX_INPUT_TO = "as";
Blockly.Msg.LISTS_SET_INDEX_INSERT = "insert at";
Blockly.Msg.LISTS_SET_INDEX_SET = "set";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_FIRST = "Inserts the item at the start of a list.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_FROM_END = "Inserts the item at the specified position in a list. #1 is the last item.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_FROM_START = "Inserts the item at the specified position in a list. #1 is the first item.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_LAST = "Append the item to the end of a list.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_RANDOM = "Inserts the item randomly in a list.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_FIRST = "Sets the first item in a list.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_FROM_END = "Sets the item at the specified position in a list. #1 is the last item.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_FROM_START = "Sets the item at the specified position in a list. #1 is the first item.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_LAST = "Sets the last item in a list.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_RANDOM = "Sets a random item in a list.";
Blockly.Msg.LISTS_SPLIT_HELPURL = "https://github.com/google/blockly/wiki/Lists#splitting-strings-and-joining-lists";
Blockly.Msg.LISTS_SPLIT_LIST_FROM_TEXT = "make list from text";
Blockly.Msg.LISTS_SPLIT_TEXT_FROM_LIST = "make text from list";
Blockly.Msg.LISTS_SPLIT_TOOLTIP_JOIN = "Join a list of texts into one text, separated by a delimiter.";
Blockly.Msg.LISTS_SPLIT_TOOLTIP_SPLIT = "Split text into a list of texts, breaking at each delimiter.";
Blockly.Msg.LISTS_SPLIT_WITH_DELIMITER = "with delimiter";
Blockly.Msg.LOGIC_BOOLEAN_FALSE = "false";
Blockly.Msg.LOGIC_BOOLEAN_HELPURL = "https://github.com/google/blockly/wiki/Logic#values";
Blockly.Msg.LOGIC_BOOLEAN_TOOLTIP = "Returns either true or false.";
Blockly.Msg.LOGIC_BOOLEAN_TRUE = "true";
Blockly.Msg.LOGIC_COMPARE_HELPURL = "https://en.wikipedia.org/wiki/Inequality_(mathematics)";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_EQ = "Return true if both inputs equal each other.";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_GT = "Return true if the first input is greater than the second input.";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_GTE = "Return true if the first input is greater than or equal to the second input.";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_LT = "Return true if the first input is smaller than the second input.";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_LTE = "Return true if the first input is smaller than or equal to the second input.";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_NEQ = "Return true if both inputs are not equal to each other.";
Blockly.Msg.LOGIC_NEGATE_HELPURL = "https://github.com/google/blockly/wiki/Logic#not";
Blockly.Msg.LOGIC_NEGATE_TITLE = "not %1";
Blockly.Msg.LOGIC_NEGATE_TOOLTIP = "Returns true if the input is false. Returns false if the input is true.";
Blockly.Msg.LOGIC_NULL = "null";
Blockly.Msg.LOGIC_NULL_HELPURL = "https://en.wikipedia.org/wiki/Nullable_type";
Blockly.Msg.LOGIC_NULL_TOOLTIP = "Returns null.";
Blockly.Msg.LOGIC_OPERATION_AND = "and";
Blockly.Msg.LOGIC_OPERATION_HELPURL = "https://github.com/google/blockly/wiki/Logic#logical-operations";
Blockly.Msg.LOGIC_OPERATION_OR = "or";
Blockly.Msg.LOGIC_OPERATION_TOOLTIP_AND = "Return true if both inputs are true.";
Blockly.Msg.LOGIC_OPERATION_TOOLTIP_OR = "Return true if at least one of the inputs is true.";
Blockly.Msg.LOGIC_TERNARY_CONDITION = "test";
Blockly.Msg.LOGIC_TERNARY_HELPURL = "https://en.wikipedia.org/wiki/%3F:";
Blockly.Msg.LOGIC_TERNARY_IF_FALSE = "if false";
Blockly.Msg.LOGIC_TERNARY_IF_TRUE = "if true";
Blockly.Msg.LOGIC_TERNARY_TOOLTIP = "Check the condition in 'test'. If the condition is true, returns the 'if true' value; otherwise returns the 'if false' value.";
Blockly.Msg.MATH_ADDITION_SYMBOL = "+";
Blockly.Msg.MATH_ARITHMETIC_HELPURL = "https://en.wikipedia.org/wiki/Arithmetic";
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_ADD = "Return the sum of the two numbers.";
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_DIVIDE = "Return the quotient of the two numbers.";
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_MINUS = "Return the difference of the two numbers.";
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_MULTIPLY = "Return the product of the two numbers.";
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_POWER = "Return the first number raised to the power of the second number.";
Blockly.Msg.MATH_CHANGE_HELPURL = "https://en.wikipedia.org/wiki/Programming_idiom#Incrementing_a_counter";
Blockly.Msg.MATH_CHANGE_TITLE = "change %1 by %2";
Blockly.Msg.MATH_CHANGE_TOOLTIP = "Add a number to variable '%1'.";
Blockly.Msg.MATH_CONSTANT_HELPURL = "https://en.wikipedia.org/wiki/Mathematical_constant";
Blockly.Msg.MATH_CONSTANT_TOOLTIP = "Return one of the common constants: π (3.141…), e (2.718…), φ (1.618…), sqrt(2) (1.414…), sqrt(½) (0.707…), or ∞ (infinity).";
Blockly.Msg.MATH_CONSTRAIN_HELPURL = "https://en.wikipedia.org/wiki/Clamping_%28graphics%29";
Blockly.Msg.MATH_CONSTRAIN_TITLE = "constrain %1 low %2 high %3";
Blockly.Msg.MATH_CONSTRAIN_TOOLTIP = "Constrain a number to be between the specified limits (inclusive).";
Blockly.Msg.MATH_DIVISION_SYMBOL = "÷";
Blockly.Msg.MATH_IS_DIVISIBLE_BY = "is divisible by";
Blockly.Msg.MATH_IS_EVEN = "is even";
Blockly.Msg.MATH_IS_NEGATIVE = "is negative";
Blockly.Msg.MATH_IS_ODD = "is odd";
Blockly.Msg.MATH_IS_POSITIVE = "is positive";
Blockly.Msg.MATH_IS_PRIME = "is prime";
Blockly.Msg.MATH_IS_TOOLTIP = "Check if a number is an even, odd, prime, whole, positive, negative, or if it is divisible by certain number. Returns true or false.";
Blockly.Msg.MATH_IS_WHOLE = "is whole";
Blockly.Msg.MATH_MODULO_HELPURL = "https://en.wikipedia.org/wiki/Modulo_operation";
Blockly.Msg.MATH_MODULO_TITLE = "remainder of %1 ÷ %2";
Blockly.Msg.MATH_MODULO_TOOLTIP = "Return the remainder from dividing the two numbers.";
Blockly.Msg.MATH_MULTIPLICATION_SYMBOL = "×";
Blockly.Msg.MATH_NUMBER_HELPURL = "https://en.wikipedia.org/wiki/Number";
Blockly.Msg.MATH_NUMBER_TOOLTIP = "A number.";
Blockly.Msg.MATH_ONLIST_HELPURL = "";
Blockly.Msg.MATH_ONLIST_OPERATOR_AVERAGE = "average of list";
Blockly.Msg.MATH_ONLIST_OPERATOR_MAX = "max of list";
Blockly.Msg.MATH_ONLIST_OPERATOR_MEDIAN = "median of list";
Blockly.Msg.MATH_ONLIST_OPERATOR_MIN = "min of list";
Blockly.Msg.MATH_ONLIST_OPERATOR_MODE = "modes of list";
Blockly.Msg.MATH_ONLIST_OPERATOR_RANDOM = "random item of list";
Blockly.Msg.MATH_ONLIST_OPERATOR_STD_DEV = "standard deviation of list";
Blockly.Msg.MATH_ONLIST_OPERATOR_SUM = "sum of list";
Blockly.Msg.MATH_ONLIST_TOOLTIP_AVERAGE = "Return the average (arithmetic mean) of the numeric values in the list.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_MAX = "Return the largest number in the list.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_MEDIAN = "Return the median number in the list.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_MIN = "Return the smallest number in the list.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_MODE = "Return a list of the most common item(s) in the list.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_RANDOM = "Return a random element from the list.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_STD_DEV = "Return the standard deviation of the list.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_SUM = "Return the sum of all the numbers in the list.";
Blockly.Msg.MATH_POWER_SYMBOL = "^";
Blockly.Msg.MATH_RANDOM_FLOAT_HELPURL = "https://en.wikipedia.org/wiki/Random_number_generation";
Blockly.Msg.MATH_RANDOM_FLOAT_TITLE_RANDOM = "random fraction";
Blockly.Msg.MATH_RANDOM_FLOAT_TOOLTIP = "Return a random fraction between 0.0 (inclusive) and 1.0 (exclusive).";
Blockly.Msg.MATH_RANDOM_INT_HELPURL = "https://en.wikipedia.org/wiki/Random_number_generation";
Blockly.Msg.MATH_RANDOM_INT_TITLE = "random integer from %1 to %2";
Blockly.Msg.MATH_RANDOM_INT_TOOLTIP = "Return a random integer between the two specified limits, inclusive.";
Blockly.Msg.MATH_ROUND_HELPURL = "https://en.wikipedia.org/wiki/Rounding";
Blockly.Msg.MATH_ROUND_OPERATOR_ROUND = "round";
Blockly.Msg.MATH_ROUND_OPERATOR_ROUNDDOWN = "round down";
Blockly.Msg.MATH_ROUND_OPERATOR_ROUNDUP = "round up";
Blockly.Msg.MATH_ROUND_TOOLTIP = "Round a number up or down.";
Blockly.Msg.MATH_SINGLE_HELPURL = "https://en.wikipedia.org/wiki/Square_root";
Blockly.Msg.MATH_SINGLE_OP_ABSOLUTE = "absolute";
Blockly.Msg.MATH_SINGLE_OP_ROOT = "square root";
Blockly.Msg.MATH_SINGLE_TOOLTIP_ABS = "Return the absolute value of a number.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_EXP = "Return e to the power of a number.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_LN = "Return the natural logarithm of a number.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_LOG10 = "Return the base 10 logarithm of a number.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_NEG = "Return the negation of a number.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_POW10 = "Return 10 to the power of a number.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_ROOT = "Return the square root of a number.";
Blockly.Msg.MATH_SUBTRACTION_SYMBOL = "-";
Blockly.Msg.MATH_TRIG_ACOS = "acos(º)";
Blockly.Msg.MATH_TRIG_ASIN = "asin(º)";
Blockly.Msg.MATH_TRIG_ATAN = "atan(º)";
Blockly.Msg.MATH_TRIG_COS = "cos(º)";
Blockly.Msg.MATH_TRIG_HELPURL = "https://en.wikipedia.org/wiki/Trigonometric_functions";
Blockly.Msg.MATH_TRIG_SIN = "sin(º)";
Blockly.Msg.MATH_TRIG_TAN = "tan(º)";
Blockly.Msg.MATH_TRIG_TOOLTIP_ACOS = "Return the arccosine of a number.";
Blockly.Msg.MATH_TRIG_TOOLTIP_ASIN = "Return the arcsine of a number.";
Blockly.Msg.MATH_TRIG_TOOLTIP_ATAN = "Return the arctangent of a number.";
Blockly.Msg.MATH_TRIG_TOOLTIP_COS = "Return the cosine of a degree (not radian).";
Blockly.Msg.MATH_TRIG_TOOLTIP_SIN = "Return the sine of a degree (not radian).";
Blockly.Msg.MATH_TRIG_TOOLTIP_TAN = "Return the tangent of a degree (not radian).";
Blockly.Msg.ME = "Me";
Blockly.Msg.NEW_VARIABLE = "New variable...";
Blockly.Msg.NEW_VARIABLE_TITLE = "New variable name:";
Blockly.Msg.ORDINAL_NUMBER_SUFFIX = "";
Blockly.Msg.PROCEDURES_ALLOW_STATEMENTS = "allow statements";
Blockly.Msg.PROCEDURES_BEFORE_PARAMS = "with:";
Blockly.Msg.PROCEDURES_CALLNORETURN_CALL = "";
Blockly.Msg.PROCEDURES_CALLNORETURN_HELPURL = "https://en.wikipedia.org/wiki/Procedure_%28computer_science%29";
Blockly.Msg.PROCEDURES_CALLNORETURN_TOOLTIP = "Run the user-defined function '%1'.";
Blockly.Msg.PROCEDURES_CALLRETURN_HELPURL = "https://en.wikipedia.org/wiki/Procedure_%28computer_science%29";
Blockly.Msg.PROCEDURES_CALLRETURN_TOOLTIP = "Run the user-defined function '%1' and use its output.";
Blockly.Msg.PROCEDURES_CALL_BEFORE_PARAMS = "with:";
Blockly.Msg.PROCEDURES_CREATE_DO = "Create '%1'";
Blockly.Msg.PROCEDURES_DEFNORETURN_DO = "";
Blockly.Msg.PROCEDURES_DEFNORETURN_HELPURL = "https://en.wikipedia.org/wiki/Procedure_%28computer_science%29";
Blockly.Msg.PROCEDURES_DEFNORETURN_PROCEDURE = "do something";
Blockly.Msg.PROCEDURES_DEFNORETURN_TITLE = "to";
Blockly.Msg.PROCEDURES_DEFNORETURN_TOOLTIP = "Creates a function with no output.";
Blockly.Msg.PROCEDURES_DEFRETURN_HELPURL = "https://en.wikipedia.org/wiki/Procedure_%28computer_science%29";
Blockly.Msg.PROCEDURES_DEFRETURN_RETURN = "return";
Blockly.Msg.PROCEDURES_DEFRETURN_TOOLTIP = "Creates a function with an output.";
Blockly.Msg.PROCEDURES_DEF_DUPLICATE_WARNING = "Warning: This function has duplicate parameters.";
Blockly.Msg.PROCEDURES_HIGHLIGHT_DEF = "Highlight function definition";
Blockly.Msg.PROCEDURES_IFRETURN_TOOLTIP = "If a value is true, then return a second value.";
Blockly.Msg.PROCEDURES_IFRETURN_WARNING = "Warning: This block may be used only within a function definition.";
Blockly.Msg.PROCEDURES_MUTATORARG_TITLE = "input name:";
Blockly.Msg.PROCEDURES_MUTATORARG_TOOLTIP = "Add an input to the function.";
Blockly.Msg.PROCEDURES_MUTATORCONTAINER_TITLE = "inputs";
Blockly.Msg.PROCEDURES_MUTATORCONTAINER_TOOLTIP = "Add, remove, or reorder inputs to this function.";
Blockly.Msg.REMOVE_COMMENT = "Remove Comment";
Blockly.Msg.RENAME_VARIABLE = "Rename variable...";
Blockly.Msg.RENAME_VARIABLE_TITLE = "Rename all '%1' variables to:";
Blockly.Msg.TEXT_APPEND_APPENDTEXT = "append text";
Blockly.Msg.TEXT_APPEND_HELPURL = "https://github.com/google/blockly/wiki/Text#text-modification";
Blockly.Msg.TEXT_APPEND_TO = "to";
Blockly.Msg.TEXT_APPEND_TOOLTIP = "Append some text to variable '%1'.";
Blockly.Msg.TEXT_CHANGECASE_HELPURL = "https://github.com/google/blockly/wiki/Text#adjusting-text-case";
Blockly.Msg.TEXT_CHANGECASE_OPERATOR_LOWERCASE = "to lower case";
Blockly.Msg.TEXT_CHANGECASE_OPERATOR_TITLECASE = "to Title Case";
Blockly.Msg.TEXT_CHANGECASE_OPERATOR_UPPERCASE = "to UPPER CASE";
Blockly.Msg.TEXT_CHANGECASE_TOOLTIP = "Return a copy of the text in a different case.";
Blockly.Msg.TEXT_CHARAT_FIRST = "get first letter";
Blockly.Msg.TEXT_CHARAT_FROM_END = "get letter # from end";
Blockly.Msg.TEXT_CHARAT_FROM_START = "get letter #";
Blockly.Msg.TEXT_CHARAT_HELPURL = "https://github.com/google/blockly/wiki/Text#extracting-text";
Blockly.Msg.TEXT_CHARAT_INPUT_INTEXT = "in text";
Blockly.Msg.TEXT_CHARAT_LAST = "get last letter";
Blockly.Msg.TEXT_CHARAT_RANDOM = "get random letter";
Blockly.Msg.TEXT_CHARAT_TAIL = "";
Blockly.Msg.TEXT_CHARAT_TOOLTIP = "Returns the letter at the specified position.";
Blockly.Msg.TEXT_CREATE_JOIN_ITEM_TOOLTIP = "Add an item to the text.";
Blockly.Msg.TEXT_CREATE_JOIN_TITLE_JOIN = "join";
Blockly.Msg.TEXT_CREATE_JOIN_TOOLTIP = "Add, remove, or reorder sections to reconfigure this text block.";
Blockly.Msg.TEXT_GET_SUBSTRING_END_FROM_END = "to letter # from end";
Blockly.Msg.TEXT_GET_SUBSTRING_END_FROM_START = "to letter #";
Blockly.Msg.TEXT_GET_SUBSTRING_END_LAST = "to last letter";
Blockly.Msg.TEXT_GET_SUBSTRING_HELPURL = "https://github.com/google/blockly/wiki/Text#extracting-a-region-of-text";
Blockly.Msg.TEXT_GET_SUBSTRING_INPUT_IN_TEXT = "in text";
Blockly.Msg.TEXT_GET_SUBSTRING_START_FIRST = "get substring from first letter";
Blockly.Msg.TEXT_GET_SUBSTRING_START_FROM_END = "get substring from letter # from end";
Blockly.Msg.TEXT_GET_SUBSTRING_START_FROM_START = "get substring from letter #";
Blockly.Msg.TEXT_GET_SUBSTRING_TAIL = "";
Blockly.Msg.TEXT_GET_SUBSTRING_TOOLTIP = "Returns a specified portion of the text.";
Blockly.Msg.TEXT_INDEXOF_HELPURL = "https://github.com/google/blockly/wiki/Text#finding-text";
Blockly.Msg.TEXT_INDEXOF_INPUT_INTEXT = "in text";
Blockly.Msg.TEXT_INDEXOF_OPERATOR_FIRST = "find first occurrence of text";
Blockly.Msg.TEXT_INDEXOF_OPERATOR_LAST = "find last occurrence of text";
Blockly.Msg.TEXT_INDEXOF_TAIL = "";
Blockly.Msg.TEXT_INDEXOF_TOOLTIP = "Returns the index of the first/last occurrence of the first text in the second text. Returns 0 if text is not found.";
Blockly.Msg.TEXT_ISEMPTY_HELPURL = "https://github.com/google/blockly/wiki/Text#checking-for-empty-text";
Blockly.Msg.TEXT_ISEMPTY_TITLE = "%1 is empty";
Blockly.Msg.TEXT_ISEMPTY_TOOLTIP = "Returns true if the provided text is empty.";
Blockly.Msg.TEXT_JOIN_HELPURL = "https://github.com/google/blockly/wiki/Text#text-creation";
Blockly.Msg.TEXT_JOIN_TITLE_CREATEWITH = "create text with";
Blockly.Msg.TEXT_JOIN_TOOLTIP = "Create a piece of text by joining together any number of items.";
Blockly.Msg.TEXT_LENGTH_HELPURL = "https://github.com/google/blockly/wiki/Text#text-modification";
Blockly.Msg.TEXT_LENGTH_TITLE = "length of %1";
Blockly.Msg.TEXT_LENGTH_TOOLTIP = "Returns the number of letters (including spaces) in the provided text.";
Blockly.Msg.TEXT_PRINT_HELPURL = "https://github.com/google/blockly/wiki/Text#printing-text";
Blockly.Msg.TEXT_PRINT_TITLE = "print %1";
Blockly.Msg.TEXT_PRINT_TOOLTIP = "Print the specified text, number or other value.";
Blockly.Msg.TEXT_PROMPT_HELPURL = "https://github.com/google/blockly/wiki/Text#getting-input-from-the-user";
Blockly.Msg.TEXT_PROMPT_TOOLTIP_NUMBER = "Prompt for user for a number.";
Blockly.Msg.TEXT_PROMPT_TOOLTIP_TEXT = "Prompt for user for some text.";
Blockly.Msg.TEXT_PROMPT_TYPE_NUMBER = "prompt for number with message";
Blockly.Msg.TEXT_PROMPT_TYPE_TEXT = "prompt for text with message";
Blockly.Msg.TEXT_TEXT_HELPURL = "https://en.wikipedia.org/wiki/String_(computer_science)";
Blockly.Msg.TEXT_TEXT_TOOLTIP = "A letter, word, or line of text.";
Blockly.Msg.TEXT_TRIM_HELPURL = "https://github.com/google/blockly/wiki/Text#trimming-removing-spaces";
Blockly.Msg.TEXT_TRIM_OPERATOR_BOTH = "trim spaces from both sides of";
Blockly.Msg.TEXT_TRIM_OPERATOR_LEFT = "trim spaces from left side of";
Blockly.Msg.TEXT_TRIM_OPERATOR_RIGHT = "trim spaces from right side of";
Blockly.Msg.TEXT_TRIM_TOOLTIP = "Return a copy of the text with spaces removed from one or both ends.";
Blockly.Msg.TODAY = "Today";
Blockly.Msg.VARIABLES_DEFAULT_NAME = "item";
Blockly.Msg.VARIABLES_GET_CREATE_SET = "Create 'set %1'";
Blockly.Msg.VARIABLES_GET_HELPURL = "https://github.com/google/blockly/wiki/Variables#get";
Blockly.Msg.VARIABLES_GET_TOOLTIP = "Returns the value of this variable.";
Blockly.Msg.VARIABLES_SET = "set %1 to %2";
Blockly.Msg.VARIABLES_SET_CREATE_GET = "Create 'get %1'";
Blockly.Msg.VARIABLES_SET_HELPURL = "https://github.com/google/blockly/wiki/Variables#set";
Blockly.Msg.VARIABLES_SET_TOOLTIP = "Sets this variable to be equal to the input.";
Blockly.Msg.MATH_CHANGE_TITLE_ITEM = Blockly.Msg.VARIABLES_DEFAULT_NAME;
Blockly.Msg.PROCEDURES_DEFRETURN_TITLE = Blockly.Msg.PROCEDURES_DEFNORETURN_TITLE;
Blockly.Msg.CONTROLS_IF_IF_TITLE_IF = Blockly.Msg.CONTROLS_IF_MSG_IF;
Blockly.Msg.CONTROLS_WHILEUNTIL_INPUT_DO = Blockly.Msg.CONTROLS_REPEAT_INPUT_DO;
Blockly.Msg.CONTROLS_IF_MSG_THEN = Blockly.Msg.CONTROLS_REPEAT_INPUT_DO;
Blockly.Msg.PROCEDURES_DEFRETURN_PROCEDURE = Blockly.Msg.PROCEDURES_DEFNORETURN_PROCEDURE;
Blockly.Msg.CONTROLS_IF_ELSE_TITLE_ELSE = Blockly.Msg.CONTROLS_IF_MSG_ELSE;
Blockly.Msg.PROCEDURES_CALLRETURN_CALL = Blockly.Msg.PROCEDURES_CALLNORETURN_CALL;
Blockly.Msg.LISTS_GET_SUBLIST_INPUT_IN_LIST = Blockly.Msg.LISTS_INLIST;
Blockly.Msg.LISTS_GET_INDEX_INPUT_IN_LIST = Blockly.Msg.LISTS_INLIST;
Blockly.Msg.PROCEDURES_DEFRETURN_DO = Blockly.Msg.PROCEDURES_DEFNORETURN_DO;
Blockly.Msg.CONTROLS_IF_ELSEIF_TITLE_ELSEIF = Blockly.Msg.CONTROLS_IF_MSG_ELSEIF;
Blockly.Msg.LISTS_GET_INDEX_HELPURL = Blockly.Msg.LISTS_INDEX_OF_HELPURL;
Blockly.Msg.CONTROLS_FOREACH_INPUT_DO = Blockly.Msg.CONTROLS_REPEAT_INPUT_DO;
Blockly.Msg.CONTROLS_FOR_INPUT_DO = Blockly.Msg.CONTROLS_REPEAT_INPUT_DO;
Blockly.Msg.LISTS_CREATE_WITH_ITEM_TITLE = Blockly.Msg.VARIABLES_DEFAULT_NAME;
Blockly.Msg.TEXT_APPEND_VARIABLE = Blockly.Msg.VARIABLES_DEFAULT_NAME;
Blockly.Msg.TEXT_CREATE_JOIN_ITEM_TITLE_ITEM = Blockly.Msg.VARIABLES_DEFAULT_NAME;
Blockly.Msg.LISTS_INDEX_OF_INPUT_IN_LIST = Blockly.Msg.LISTS_INLIST;
Blockly.Msg.LISTS_SET_INDEX_INPUT_IN_LIST = Blockly.Msg.LISTS_INLIST;

//General
Blockly.Msg.INOUT_VALUE="Value";
Blockly.Msg.PIN="PIN#";

//SIMPLE SENSORS
Blockly.Msg.BUTTON_NAME="Button";
Blockly.Msg.BUTTON_LOGIC="Logic inverse";
Blockly.Msg.BUTTON_PRESSED="pressed?";
Blockly.Msg.BUTTON_TOUCH_NAME="Capacity Touch";
Blockly.Msg.KNOCK_NAME="Knock";
Blockly.Msg.KNOCK_DETECTED="detected?";
Blockly.Msg.TILT_NAME="Digital Tilt";
Blockly.Msg.TILT_DETECTED="detected?";
Blockly.Msg.POTE_NAME="Potentiometer";
Blockly.Msg.PERCENT="percent(0-100)%";
Blockly.Msg.VALUE="Value(0-1023)";
Blockly.Msg.PHOTO_NAME="Photo Interrupter";
Blockly.Msg.PHOTO_DETECTED="detected?";
Blockly.Msg.VAR_LM35="LM35 Temperature (ºC)";
Blockly.Msg.LDR_NAME="Photocell (LDR or CDS) ";
Blockly.Msg.LDR_DETECTED="detected?";
Blockly.Msg.IR_NAME="Infrared";
Blockly.Msg.IR_DETECTED="sensed?";
Blockly.Msg.FLAME_NAME="Flame";
Blockly.Msg.FLAME_DETECTED="detected?";
Blockly.Msg.SOUND_NAME="Sound (MIC)";
Blockly.Msg.SOUND_DETECTED="detected?";
Blockly.Msg.DHT_NAME="DHT";
Blockly.Msg.DHT_Type="Type";
Blockly.Msg.DHT_Type11="DHT11";
Blockly.Msg.DHT_Type21="DHT21";
Blockly.Msg.DHT_Type22="DHT22";
Blockly.Msg.DHT_Temp="Temperature ºC";
Blockly.Msg.DHT_Humi="Humidity";
Blockly.Msg.DHT_Head="Heat Index ºC";
Blockly.Msg.GAS_NAME="Gas CO (MQ-7)";
Blockly.Msg.GAS_DETECTED="detected?";
Blockly.Msg.ALCOHOL_NAME="Alcohol (MQ-3)";
Blockly.Msg.ALCOHOL_DETECTED="detected?";
Blockly.Msg.VIBRATION_NAME="Vibration";
Blockly.Msg.VIBRATION_DETECTED="detected?";
Blockly.Msg.HALL_NAME="Hall Magnetic";
Blockly.Msg.HALL_DETECTED="detected?";
Blockly.Msg.PIR_NAME="PIR Motion";
Blockly.Msg.PIR_DETECTED="detected?";
Blockly.Msg.VAPOR_NAME="Vapor (Steam)";
Blockly.Msg.ALIGHT_NAME="Ambient Light (TEMT6000)";
Blockly.Msg.WATER_NAME="Water level";
Blockly.Msg.MOISTURE_NAME="Soil Moisture";
Blockly.Msg.JOYSTICK_NAME="Joystick axis";
Blockly.Msg.JOYSTICK_BUTTON="Joystick button";
Blockly.Msg.JOYSTICK_PRESSED="pressed?";


//SIMPLE ACTUATORS
Blockly.Msg.LedPin="Led PIN#";
Blockly.Msg.LaserPin="Laser PIN#";
Blockly.Msg.RelePin="Rele PIN#";
Blockly.Msg.ONOFF="Set";
Blockly.Msg.ACTUATOR_HIGH_LEVEL="ON";
Blockly.Msg.ACTUATOR_LOW_LEVEL="OFF";
Blockly.Msg.TonePin="Tone PIN#";
Blockly.Msg.Frequence="Frequency";
Blockly.Msg.Duration="Duration";
Blockly.Msg.NoTonePin="No Tone PIN#";
Blockly.Msg.LedLevelPin="Led intensity (PWM) PIN#";
Blockly.Msg.LedLevelValue="Value(0-255)";
Blockly.Msg.LedRGBName="RGB Led(0-255) Common";
Blockly.Msg.LedRGBpinR="Pin R";
Blockly.Msg.LedRGBpinG="Pin G";
Blockly.Msg.LedRGBpinB="Pin B";
Blockly.Msg.LedRGBcolor="Color";
Blockly.Msg.Note="Note";
Blockly.Msg.Octave="Octave";
//Blockly.Msg.Duration="Duration(ms)";

//OTHER SENSORS
Blockly.Msg.TempDS18B20="Init DS18B20 temperature sensor ";
Blockly.Msg.OrderReadTempDS18B20="DS18B20 Order to read the temperature";
Blockly.Msg.ReadTempDS18B20="DS18B20 Read the temperature ºC #Sensor";
Blockly.Msg.RotaryEncoderInit="Init Rotary Encoder";
Blockly.Msg.RotaryEncoderNumber="Rotary Encoder";
Blockly.Msg.RE_Interrupt="using interrupts";
Blockly.Msg.RE_withoutInterrupt="without interrupts";
Blockly.Msg.RE_PINDT="Pin DT";
Blockly.Msg.RE_PINCLK="Pin CLK";
Blockly.Msg.RE_READ="Read Value";
Blockly.Msg.RE_WRITE="Write Value";
Blockly.Msg.RE_Button="Button";
Blockly.Msg.RE_Pressed="pressed?";

//IN OUT
Blockly.Msg.INOUT_HIGH_LEVEL="High";
Blockly.Msg.INOUT_LOW_LEVEL="Low";
Blockly.Msg.INPOUT_DIGITAL_WRITE="DigitalWrite PIN#";
Blockly.Msg.INOUT_STAT="Stat";
Blockly.Msg.INOUT_DIG_READ="Digital read PIN#";
Blockly.Msg.INOUT_ANA_READ="AnalogRead PIN#";
Blockly.Msg.INOUT_BUI_LED="Integrated LED Stat";
Blockly.Msg.INOUT_ANA_WRITE="Analog Write";
Blockly.Msg.INOUT_VALUE2="Value(0-255)";
Blockly.Msg.INOUT_TOOLTIP_WRITE="Write digital value to a specific Port";

//SERIAL
Blockly.Msg.SERIAL_Init="Init Serial-USB ";
Blockly.Msg.SERIAL_BAUD="Baudios";
Blockly.Msg.Serial_Print="Serial Print on new line";
Blockly.Msg.Serial_PrintL="Serial Print on same line";
Blockly.Msg.Serial_Write="Serial write";
Blockly.Msg.Serial_write_out="Write";
Blockly.Msg.Serial_Print_Format="Serial Print  Format";
Blockly.Msg.Serial_Print_ForDecimal="decimal";
Blockly.Msg.Serial_Print_ForHexa="hexadecimal";
Blockly.Msg.Serial_Print_ForBin="binary";
Blockly.Msg.Serial_Print_ForOct="octal";
Blockly.Msg.Serial_read="Serial Read";
Blockly.Msg.Serial_avai="Serial Available?";
Blockly.Msg.Serial_flush="Serial flush";

//SERIAL1
Blockly.Msg.SERIAL1_Init="Init Serial1 RX# Port15 TX# Port16 ";
Blockly.Msg.SERIAL1_BAUD="Baudios";
Blockly.Msg.SERIAL1_Read="Serial1 Read";
Blockly.Msg.SERIAL1_Write="Serial1 write";
Blockly.Msg.SERIAL1_Println="Serial1 Print on new line";
Blockly.Msg.SERIAL1_Print="Serial1 Print on same line";
Blockly.Msg.SERIAL1_Avai="Serial1 Available?";
Blockly.Msg.Serial1_flush="Serial1 flush";
Blockly.Msg.Serial1_Print_Format="Serial1 Print  Format";
Blockly.Msg.Serial1_Print_ForDecimal="decimal";
Blockly.Msg.Serial1_Print_ForHexa="hexadecimal";
Blockly.Msg.Serial1_Print_ForBin="binary";
Blockly.Msg.Serial1_Print_ForOct="octal";

//SOFTWARE SERIAL
Blockly.Msg.SSERIAL_Init="Init";
Blockly.Msg.SSERIAL_TX="Port TX#";
Blockly.Msg.SSERIAL_RX="Port RX#";
Blockly.Msg.SSERIAL_BAUD="Baudios";
Blockly.Msg.SSERIAL_Read="SoftwareSerial Read";
Blockly.Msg.SSERIAL_Println="SoftwareSerial Print on new line";
Blockly.Msg.SSERIAL_Print="SoftwareSerial Print on same line";
Blockly.Msg.SSERIAL_Write="SoftwareSerial write"
Blockly.Msg.SSERIAL_Avai="SoftwareSerial Available?";
Blockly.Msg.SSerial_Print_Format="SoftwareSerial Print  Format";
Blockly.Msg.SSerial_Print_ForDecimal="decimal";
Blockly.Msg.SSerial_Print_ForHexa="hexadecimal";
Blockly.Msg.SSerial_Print_ForBin="binary";
Blockly.Msg.SSerial_Print_ForOct="octal";

// SOFTWARE SERIAL FOR BT
Blockly.Msg.SSERIAL_BT_Init="Init Bluetooth";
Blockly.Msg.SSERIAL_BT_TX="Port TX#";
Blockly.Msg.SSERIAL_BT_RX="Port RX#";
Blockly.Msg.SSERIAL_BT_BAUD="Baudios";
Blockly.Msg.SSERIAL_BT_Read="SoftwareSerial BT Read";
Blockly.Msg.SSERIAL_BT_Println="SoftwareSerial BT Print on new line";
Blockly.Msg.SSERIAL_BT_Print="SoftwareSerial BT Print on same line";
Blockly.Msg.SSERIAL_BT_Write="SoftwareSerial BT write"
Blockly.Msg.SSERIAL_BT_Avai="SoftwareSerial BT Available?";
Blockly.Msg.SSerial_BT_Print_Format="SoftwareSerial BT Print  Format";

// SERIAL1 FOR BT
Blockly.Msg.SERIAL1_BT_Init="Init BT Serial1 RX# Port15 TX# Port16 ";
Blockly.Msg.SERIAL1_BT_BAUD="Baudios";
Blockly.Msg.SERIAL1_BT_Read="BT Serial1 Read";
Blockly.Msg.SERIAL1_BT_Write="BT Serial1 write";
Blockly.Msg.SERIAL1_BT_Println="BT Serial1 Print on new line";
Blockly.Msg.SERIAL1_BT_Print="BT Serial1 Print on same line";
Blockly.Msg.SERIAL1_BT_Avai="BT Serial1 Available?";
Blockly.Msg.Serial1_BT_flush="BT Serial1 flush";
Blockly.Msg.Serial1_BT_Print_Format="BTSerial1 Print  Format";


//MOTOR MRT
Blockly.Msg.MOTOR_Connector="Motor";
Blockly.Msg.MOTOR_Direction="Direction";
Blockly.Msg.MOTOR_speed="Speed(0-255)";

//STEPPER
Blockly.Msg.STEEPER_name="Init Stepper ID";
Blockly.Msg.STEEPER2_name="Stepper ID";
Blockly.Msg.STEEPER_steprev="Steps/Rev.";
Blockly.Msg.STEEPER_step="Steps";
Blockly.Msg.STEEPER_speed="Speed (rpm)";
Blockly.Msg.STEEPER_pin1="PIN-A";
Blockly.Msg.STEEPER_pin2="PIN-B";
Blockly.Msg.STEEPER_pin3="PIN-C";
Blockly.Msg.STEEPER_pin4="PIN-D";

//EEPROM
Blockly.Msg.STORAGE_EEPROM_WRITE_BYTE = "EEPROM write a byte in adress";
Blockly.Msg.STORAGE_EEPROM_WRITE_VARIABLE = "EEPROM write in adress";
Blockly.Msg.STORAGE_DATA_BYTE = "value(0-255)";
Blockly.Msg.STORAGE_DATA_VARIABLE = "the variable";
Blockly.Msg.STORAGE_DATA_VARIABLE2 = "and save in the variable";
Blockly.Msg.STORAGE_EEPROM_READ_BYTE = "EEPROM read a byte in adress";
Blockly.Msg.STORAGE_EEPROM_READ_VARIABLE = "EEPROM read from adress";

//STRIP LEDs
Blockly.Msg.ledstrip_WS2812B_name = "Led Strip";
Blockly.Msg.ledstrip_WS2812B_init = "WS2812B Init";
Blockly.Msg.ledstrip_WS2812B_init_Pin = "Pin#";
Blockly.Msg.ledstrip_WS2812B_Number_of_Leds = "Number of leds";
Blockly.Msg.ledstrip_WS2812B_Show = "Show";
Blockly.Msg.ledstrip_WS2812B_Clear = "Clear all leds";

/*
Blockly.Msg.ledstrip_WS2812B_DEFAULT_NAME = "RGB_LED";
Blockly.Msg.ledstrip_WS2812B_Brightness = "Brightness =";
Blockly.Msg.ledstrip_WS2812B_DEFAULT_NAME = "NeoPixels";
Blockly.Msg.ledstrip_WS2812B_setPixelColor = "Led RGB WS2812B. Send color :";
Blockly.Msg.ledstrip_WS2812B_setPixelColor_Red = "Red (255 max) =";
Blockly.Msg.ledstrip_WS2812B_setPixelColor_Green = "Green (255 max) =";
Blockly.Msg.ledstrip_WS2812B_setPixelColor_Blue = "Blue (255 max) =";
Blockly.Msg.ledstrip_WS2812B_setPixelColor_Pixel_Number = "for pixel number (0 first) =";
*/

//SERVO
Blockly.Msg.SERVO_Servo="Servo";
Blockly.Msg.PIN="PIN#";
Blockly.Msg.Degree="Degree(0-180)";
Blockly.Msg.Delay="Delay";
Blockly.Msg.SERVO_ReadDegree="Read Degrees";
Blockly.Msg.SERVO_Attached="Servo Attached?";
Blockly.Msg.SERVO_Detach="Detach Servo PIN#";

//REMOTE CONTROL IR_DETECTED
Blockly.Msg.MRT_IR="Init Remote Control IR MRT";
Blockly.Msg.MRT_CHANNEL="Channel";
Blockly.Msg.MRT_KEY="Key MRT";
Blockly.Msg.MRT_PRESSED="Pressed?";
Blockly.Msg.GENERAL_IR="Generic Remote Control IR";
Blockly.Msg.GENERAL_PRESSED="Read key";

//SERIAL LCD I2C
//Blockly.Msg.LCD_Serial="Serial LCD";
//Blockly.Msg.LCD_Print_Line1="print line 1";
//Blockly.Msg.LCD_Print_Line2="print line 2";
//Blockly.Msg.Power="Power";
//Blockly.Msg.ONN="ON";
//Blockly.Msg.OFFF="OFF";
//Blockly.Msg.LCD_Effect="Effect";
//Blockly.Msg.LCD_Scroll_Left="Scroll Left";
//Blockly.Msg.LCD_Scroll_Right="Scroll Right";
//Blockly.Msg.LCD_Scroll_Auto="Scroll Auto";
//Blockly.Msg.LCDP_Setup = "LCD Setup";
//Blockly.Msg.LCDP_RS = "RS";
//Blockly.Msg.LCDP_Enabled = "Enabled";
//Blockly.Msg.LCDP_D4 = "D4";
//Blockly.Msg.LCDP_D5 = "D5";
//Blockly.Msg.LCDP_D6 = "D6";
//Blockly.Msg.LCDP_D7 = "D7";
Blockly.Msg.LCDP_Column = "Columns";
Blockly.Msg.LCDP_Row = "Rows";
Blockly.Msg.LCDP_Column2 = "column";
Blockly.Msg.LCDP_Row2 = "row";
Blockly.Msg.LCDP_Print = "and print";
Blockly.Msg.LCDP_Clear = "LCD I2C clear";
Blockly.Msg.LCDP_scrollDisplay = "LCD I2C scroll display ";
Blockly.Msg.LCDP_setBcklight = "LCD I2C set Backlight ";
Blockly.Msg.LCDP_showCursor = "LCD I2C show Cursor ";
Blockly.Msg.LCDP_blinkCursor = "LCD I2C blink Cursor ";
Blockly.Msg.LCDP_Home = "LCD I2C home";
Blockly.Msg.LCDP_SetCursor = "LCD I2C set cursor";
Blockly.Msg.LCDP_Display = "LCD I2C ";
//Blockly.Msg.LCDP_noDiplay = "LCD I2C no display";
Blockly.Msg.LCD_I2C_setup = "Init LCD I2C - SDA Port13 - SCL Port14 Address";
Blockly.Msg.LCD_I2C_BQ_setup = "Init BQ LCD I2C (16 columns 2 rows) ";
Blockly.Msg.LCD_I2C_BQ_pins = "SDA Port13 - SCL Port14";


//VARIOUS
Blockly.Msg.VAR_TemSens="Analog NTC Temperature (ºC)";
Blockly.Msg.VAR_Motor="Motor";
Blockly.Msg.Stop="Stop";
Blockly.Msg.Forward="Forward";
Blockly.Msg.Right="Right";
Blockly.Msg.Left="Left";
Blockly.Msg.Backward="Backward";
Blockly.Msg.DelayMicros="Delay microseconds";
Blockly.Msg.DelayMs="Delay milliseconds";
Blockly.Msg.DelayS="Delay seconds";
Blockly.Msg.SinceProgramStarted="Milliseconds since the program started"; 
Blockly.Msg.SecondSinceProgramStarted="Seconds since the program started";  
Blockly.Msg.MicroSecondSinceProgramStarted="Microseconds since the program started";  
Blockly.Msg.ARDUINO_BASE_TEMPO1 = "When";
Blockly.Msg.ARDUINO_BASE_TEMPO2 = "elapsed";
Blockly.Msg.ARDUINO_BASE_TEMPO_TIME = [["microseconds", "us"],["milliseconds", "ms"],["seconds", "s"]];
Blockly.Msg.ARDUINO_BASE_TEMPO_TOOLTIP = "Verify if interval of time is elapsed, if so do instructions.";



Blockly.Msg.RandomBetween="Random number between";
Blockly.Msg.And="and";
Blockly.Msg.Constrain="Constrain";
Blockly.Msg.Number="Number";
Blockly.Msg.NumberA="A";
Blockly.Msg.NumberB="B";
Blockly.Msg.PulseIn="Pulse In";
Blockly.Msg.ultrasonic_ranger="HC-SR04 Ultrasonic (cm)";
Blockly.Msg.unit="Unit";
Blockly.Msg.cm="cm";
Blockly.Msg.inch="inch";
Blockly.Msg.TRIG="TRIG Trigger";
Blockly.Msg.Echo="Echo";

//LOOPS
Blockly.Msg.Break = "Break";
Blockly.Msg.continue = "Continue";
Blockly.Msg.returnnull = "Return";

//VARIABLES 
Blockly.Msg.Var_Declare="Declare";
Blockly.Msg.Var_As="as";

//ARRAYS 
Blockly.Msg.Array_Declare="Declare Array";
Blockly.Msg.Array_As="as";
Blockly.Msg.Array_Elements="Number of elements";
Blockly.Msg.Array_INARRAY = "In Array";
Blockly.Msg.Array_SET_INDEX_SET = "set";

//Math "Map "
Blockly.Msg.Math_map="Map "; 
Blockly.Msg.Math_valueto="value to [0-";

//STRING SET
Blockly.Msg.STRING_SET = "set STRING %1 to %2";
Blockly.Msg.STRING_SET_CREATE_GET = "Create String 'get %1'";
Blockly.Msg.STRING_SET_HELPURL = "https://github.com/google/blockly/wiki/Variables#set";
Blockly.Msg.STRING_SET_TOOLTIP = "Sets this string to be equal to the input.";
Blockly.Msg.RENAME_VARIABLE = "Rename variable...";
Blockly.Msg.String_As="as String";
Blockly.Msg.STRING_charat="Char in %1 At %2";
Blockly.Msg.STRING_charat2="Char At";
Blockly.Msg.STRING_compareTo="Compare to";
Blockly.Msg.STRING_Contact="Concat ";
Blockly.Msg.STRING_LengthOf="Length of ";
Blockly.Msg.STRING_Ends_With="Ends with ";
Blockly.Msg.STRING_Equal="Equal to ";

//Conversions
Blockly.Msg.CONV_tochar="Convert to char "; 
Blockly.Msg.CONV_tobyte="Convert to Byte ";
Blockly.Msg.CONV_toint="Convert to Int ";
Blockly.Msg.CONV_tounsigendint="Convert to unsigned Int ";
Blockly.Msg.CONV_tofloat="Convert to Float ";
Blockly.Msg.CONV_toString="Convert to String ";
    
//ADVANCED I/O

Blockly.Msg.Setup="Setup";
Blockly.Msg.Loop="Main loop";
Blockly.Msg.Writecode="Arduino Code";

Blockly.Msg.sup=">";
Blockly.Msg.supeg="=>";
Blockly.Msg.inf="<";
Blockly.Msg.infeg="<=";

//ADDED 26 11 2016
Blockly.Msg.Math_map2="Map";
Blockly.Msg.Math_value="Value"; 
Blockly.Msg.Math_fromLow="fromLow";
Blockly.Msg.Math_fromHigh="fromHigh";
Blockly.Msg.Math_toLow="toLow";
Blockly.Msg.Math_toHigh="toHigh";